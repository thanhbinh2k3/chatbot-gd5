from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import os
from dotenv import load_dotenv
import openai

# Load API Key t·ª´ .env
load_dotenv()
api_key = os.getenv("KEY_API_GPT")  # ƒê·∫£m b·∫£o t√™n bi·∫øn ƒë√∫ng v·ªõi .env

if not api_key:
    raise ValueError("‚ùå L·ªñI: API Key kh√¥ng t√¨m th·∫•y! Ki·ªÉm tra l·∫°i .env")

# ‚úÖ ƒê√∫ng c√∫ ph√°p OpenAI API >= 1.0.0
client = openai.OpenAI(api_key=api_key)

app = FastAPI()

# C·∫•u h√¨nh CORS cho ph√©p truy c·∫≠p t·ª´ tr√¨nh duy·ªát
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Model nh·∫≠n d·ªØ li·ªáu t·ª´ ng∆∞·ªùi d√πng
class ChatRequest(BaseModel):
    message: str

@app.get("/")
def read_root():
    return {"message": "‚úÖ API Chatbot Tr∆∞·ªùng Ph√°i H·ªôi H·ªça GPT-4o-mini ƒëang ch·∫°y!"}

@app.post("/chatbot")
def chatbot_response(request: ChatRequest):
    user_message = request.message.strip()
    
    if not user_message:
        raise HTTPException(status_code=400, detail="‚ùå Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")

    try:
        # G·ªçi OpenAI API v·ªõi c√∫ ph√°p m·ªõi
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt AI chuy√™n v·ªÅ tr∆∞·ªùng ph√°i h·ªôi h·ªça!"},
                {"role": "user", "content": user_message}
            ]
        )

        bot_reply = response.choices[0].message.content.strip()

    except Exception as e:
        bot_reply = f"üö® ƒê√£ x·∫£y ra l·ªói: {str(e)}"

    return {"response": bot_reply}
#Ch·∫°y server b·∫±ng l·ªánh:
#uvicorn chatbot.main:app --reload --host 127.0.0.1 --port 8000 
# # Mo web
# http://localhost:8000/